Terraform Backend Configuration with S3 and DynamoDB
Task Description
Setup Instructions
you should first configure your cli to use the aws cli by using this command => aws configure
make sure you set up an iam role with security credentials to get your access key and secret key
1. Create an S3 Bucket
using this command aws s3api create-bucket --bucket (your-tf-s3-bucket) --region (preferred region)
or 
Log in to the AWS Management Console
Navigate to S3
Click "Create bucket"
Choose a globally unique name for your bucket
Configure bucket settings (e.g., versioning, encryption)
Create the bucket
if by any means the s3 bucket has been created before make use of this command to check => aws s3 ls | grep (the bucket you just created)
then run this comand to list out all the avaialble s3 bucket =>aws s3 ls then choose the one you prefer and import using this command
# ==> terraform import aws_s3_bucket.your-prefered-bucket your-prefered-bucket
and configure your aws_s3-bucket in the main.tf
also with the aws_s3_bucket_versioning
resource "aws_s3_bucket" "your-terraform-bucket" {
  bucket = "your-terraform-bucket"
  # Add other necessary configurations here
}
resource "aws_s3_bucket_versioning" "versioning_prefered" {
  bucket = aws_s3_bucket.your-terraform-bucket.id
  versioning_configuration {
    status = "Enabled"
  }
}

2. Create a DynamoDB Table
Set the table name (e.g., "terraform-state-locks")
Set the partition key to "LockID" (String)
Configure other settings as needed
and resource for the dynamodb in the main.tf conf 
Create the table in the main.tf
resource "aws_dynamodb_table" "terraform-db-lock-table" {
  name = "terraform-db-lock-table"
  hash_key = "LockID"
  billing_mode = "PAY_PER_REQUEST"
  attribute {
    name = "LockID"
    type = "S"  # String type
  }
}


3. Configure Terraform Backend
Add the following configuration to your Terraform files:
terraform {
  backend "s3" {
    bucket         = "your-bucket-name"
    key            = "path/to/your/terraform.tfstate"
    region         = "your-aws-region"
    dynamodb_table = "terraform-state-locks"
    encrypt        = true
  }
}
Replace the placeholders with your specific values.
Management and Troubleshooting
Common Issues and Solutions

Access Denied Errors

Ensure your AWS credentials have the necessary permissions for S3 and DynamoDB
Check that the bucket and table names are correct


State Locking Issues

Verify that the DynamoDB table exists and has the correct partition key
If a lock persists, you may need to manually delete the lock item from the DynamoDB table


Bucket Versioning

Enable versioning on your S3 bucket to maintain a history of state files



Best Practices

Use consistent naming conventions for S3 buckets and DynamoDB tables
Implement proper IAM policies to restrict access to the backend resources
Regularly backup your Terraform state files
Use workspaces for managing multiple environments

Useful Commands

terraform init: Initialize the backend
terraform plan
terraform apply
terraform show: Display the current state
terraform state list: List resources in the state
terraform state pull: Manually download and output the state from remote storage
